import Colors from "@/constants/Colors";
import { button, container, input, text } from "@/constants/Styles";
import ButtonFillContainer from "@/constants/components/create/ButtonFillContainer";
import CustomDropdown from "@/constants/components/create/DropdownBox";
import MyTimePicker from "@/constants/components/create/MyTimePickerModal";
import { addNewProject } from "@/constants/logic/projectFirebase";
import { useFirebaseUser } from "@/constants/logic/useFirebaseUser";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { Button } from "@rneui/themed";
import { Link, router } from "expo-router";
import { useState } from "react";
import {
  Alert,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";
import { SafeAreaProvider } from "react-native-safe-area-context";

export default function createPage(userId: any) {
  const { isLoading, userPosition, uid } = useFirebaseUser(userId);

  const [projectInfo, setProjectInfo] = useState({
    name: "",
    descript: "",
    start: null, // c·∫ßn x√°c ƒë·ªãnh c√°ch l·∫•y d·ªØ li·ªáu t·ª´ MyTimePicker
    end: null, // c·∫ßn x√°c ƒë·ªãnh c√°ch l·∫•y d·ªØ li·ªáu t·ª´ MyTimePicker
    password: "",
    destination: "", // c·∫ßn x√°c ƒë·ªãnh c√°ch l·∫•y d·ªØ li·ªáu t·ª´ CustomDropdown
    // C√°c thu·ªôc t√≠nh kh√°c n·∫øu c·∫ßn thi·∫øt
    uidManager: uid,
  });

  const handleInputChange = (name: any, value: any) => {
    setProjectInfo((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // H√†m g·ªçi khi click n√∫t "X√°c Nh·∫≠n"
  const handleAddProject = () => {
    console.log(projectInfo);
    addNewProject(projectInfo)
      .then(async (projectId) => {
        if (projectId) {
          try {
            await AsyncStorage.setItem("@projectID", projectId);
            if (projectId !== null) {
              console.log("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·∫•y v√† c√≥ th·ªÉ s·ª≠ d·ª•ng ", projectId);
            } else console.log("projectId === null");
          } catch (error) {
            // X·ª≠ l√Ω l·ªói
            console.error("L·ªói khi l·∫•y projectID:", error);
          }
          Alert.alert("Th√¥ng b√°o", "Th√™m d·ª± √°n m·ªõi ID: " + projectId, [
            {},
            {
              text: "Ok",
              onPress: () => {
                console.log("indexCreate -> formScreen");
                router.navigate({
                  pathname: "/createPage/pasteLink", // ƒê√¢y l√† t√™n c·ªßa route m√† b·∫°n mu·ªën ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn.
                  params: { projectId: projectId }, // ƒê√¢y l√† object ch·ª©a c√°c tham s·ªë b·∫°n mu·ªën truy·ªÅn.
                });
              },
            },
          ]);
          // T√πy thu·ªôc v√†o logic ·ª©ng d·ª•ng, b·∫°n c√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng ho·∫∑c hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng t·∫°i ƒë√¢y
        }
      })
      .catch((error) => {
        console.error("L·ªói khi th√™m d·ª± √°n m·ªõi:", error);
        // X·ª≠ l√Ω hi·ªÉn th·ªã th√¥ng b√°o l·ªói t·∫°i ƒë√¢y
      });
  };

  if (isLoading) {
    return (
      <SafeAreaProvider style={container.root}>
        <Button
          title="loading"
          type="clear"
          loading
          loadingProps={{ size: 70, color: Colors.muted }}
        />
      </SafeAreaProvider>
    );
  }
  if (userPosition === "Qu·∫£n L√Ω")
    return (
      <ScrollView style={{ ...container.scrollView, paddingHorizontal: 10 }}>
        <SafeAreaProvider style={container.root}>
          {/* Title */}
          <Text style={{ ...text.headerPrimary }}>Nh·∫≠p th√¥ng tin d·ª± √°n</Text>

          {/* Project Name Input */}
          <View style={container.input}>
            <Text style={text.label}>T√™n d·ª± √°n:</Text>
            <View style={container.button}>
              <TextInput
                style={{ ...input.normal }}
                placeholder="Nh·∫≠p t√™n cho d·ª± √°n"
                onChangeText={(text) => handleInputChange("name", text)}
              />
            </View>
          </View>

          {/* Project Description Input */}
          <View style={container.input}>
            <Text style={text.label}>M√¥ t·∫£:</Text>
            <View style={container.button}>
              <TextInput
                style={{
                  ...input.normal,
                  height: "auto",
                }}
                placeholder="Nh·∫≠p m√¥ t·∫£ cho d·ª± √°n"
                onChangeText={(text) => handleInputChange("descript", text)}
                multiline={true}
                numberOfLines={4}
                textAlignVertical="top"
              />
            </View>
          </View>

          {/* Project Time Start Input */}
          <View style={container.input}>
            <Text style={text.label}>Ch·ªçn th·ªùi gian b·∫Øt ƒë·∫ßu:</Text>
            <View style={container.button}>
              <MyTimePicker
                onDateChange={(newDate: any) => {
                  handleInputChange("start", newDate);
                }}
              />
            </View>
          </View>

          {/* Project Time End Input */}
          <View style={container.input}>
            <Text style={text.label}>Ch·ªçn th·ªùi gian k·∫øt th√∫c:</Text>
            <View style={container.button}>
              <MyTimePicker
                onDateChange={(newDate: any) => {
                  handleInputChange("end", newDate);
                }}
              />
            </View>
          </View>

          {/* Project Password Input */}
          <View style={container.input}>
            <Text style={text.label}>M·∫≠t kh·∫©u:</Text>
            <View style={container.button}>
              <TextInput
                style={{ ...input.normal }}
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u cho d·ª± √°n"
                secureTextEntry={true}
                textContentType="password"
                autoCapitalize="none"
                onChangeText={(text) => handleInputChange("password", text)}
              />
            </View>
          </View>

          {/* Project Destination Chose Input */}
          <View style={{ ...container.input, paddingBottom: 10 }}>
            <Text style={text.label}>Ch·ªçn ƒë·ªãa ƒëi·ªÉm:</Text>
            <View style={{ ...container.button }}>
              <CustomDropdown
                onLocationChange={(newLocation: any) => {
                  handleInputChange("destination", newLocation);
                }}
              />
            </View>
          </View>

          {/* Project Submit Info */}

          <View style={container.button}>
            <Link href={"/homePage/indexHome"} asChild>
              <TouchableOpacity
                style={{ ...button.primary, backgroundColor: Colors.red }}
              >
                <Text style={button.textLight}>H·ªßy</Text>
              </TouchableOpacity>
            </Link>

            <TouchableOpacity style={button.primary} onPress={handleAddProject}>
              <Text style={button.textPrimary}>X√°c Nh·∫≠n</Text>
            </TouchableOpacity>
          </View>
        </SafeAreaProvider>
      </ScrollView>
    );
  else
    return (
      <SafeAreaProvider
        style={{
          ...container.root,
        }}
      >
        <Text
          style={{
            ...text.headerPrimary,
            textAlign: "center",
            alignSelf: "stretch",
          }}
        >
          B·∫°n Mu·ªën Tham Gia D·ª± √Ån üßê
        </Text>

        <Text
          style={{
            ...text.headerPrimary,
            textAlign: "center",
            fontSize: 14,
            color: Colors.white,
          }}
        >
          Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ tham gia d·ª± √°n b·∫°n nh√© üëáüèª
        </Text>

        <Text
          style={{
            ...text.headerPrimary,
            textAlign: "center",
            fontSize: 16,
            color: Colors.success,
          }}
        >
          L∆∞u √Ω: C·∫ßn m√£ d·ª± √°n v√† m·∫≠t kh·∫©u d·ª± √°n
        </Text>

        <ButtonFillContainer
          link={"../projectsPage/joinProjectsPage/enterLink"}
          color={Colors.primary}
          onPress={null}
          title={"Tham Gia D·ª± √Ån"}
        ></ButtonFillContainer>
      </SafeAreaProvider>
    );
}
